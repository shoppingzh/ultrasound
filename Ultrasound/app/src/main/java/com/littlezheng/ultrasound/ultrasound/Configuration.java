package com.littlezheng.ultrasound.ultrasound;

import android.content.Context;

import com.littlezheng.ultrasound.util.FileUtils;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

/**
 * Created by zxp on 2017/8/2.
 */

public class Configuration {

    private static final String TAG = "Configuration";
    private static Configuration conf;

    /**
     *    1. UDP_RECEIVE_PORT UDP接收端口
     *    2. UDP_SEND_PORT UDP发送端口
     *    3. UDP_RECEIVE_PACKET_SIZE UDP接收数据包大小
     *    4. UDP_SEND_PACKET_SIZE UDP发送数据包大小
     *    5. UDP_RECEIVE_PACKET_QUEUE_CAPACITY UDP接收缓冲队列容量
     *    6. AP_IP AP基站的IP地址
     *    7. AP_SSID AP基站的网络名
     *    8. UDP_USEFUL_DATA_LEN UDP可用数据的长度
     *    9. SNAPSHOT_SAVE_FOLDER 快照保存文件夹
     */
    public static final int UDP_RECEIVE_PORT = 5001;
    public static final int UDP_SEND_PORT = 5001;
    public static final int UDP_RECEIVE_PACKET_SIZE = 406;
    public static final int UDP_SEND_PACKET_SIZE = 6;
    public static final int UDP_RECEIVE_PACKET_QUEUE_CAPACITY = 127;
    public static final String AP_IP = "192.168.1.1";
//    public static final String AP_SSID = "\"aoligeiA\"";
    public static final String AP_SSID = "\"FAST_4D3492\"";
    public static final int UDP_USEFUL_DATA_LEN = 400;
    public static final String SNAPSHOT_SAVE_FOLDER = "aaa/img";
    public static final String VIDEO_SAVE_FOLDER = "aaa/video";

    private final Context context;
    /*******************************深度30-220mm对应的插值信息***********************************/
    private final int[][][] positionsDepths = new int[20][][];
    private final int[][][] intervalDepths = new int[20][][];

    private Configuration(Context context) {
        this.context = context;
    }

    /**
     * 加载文件中的三次采样数据
     * 此操作为耗时操作，请勿在主线程中执行
     * @throws IOException
     */
    public void configure() throws IOException {
        initArrays();

        InputStream in = null;
        InputStreamReader ir = null;
        BufferedReader br = null;
        try {
            in= context.getAssets().open("thirdsample.conf");
            ir = new InputStreamReader(in,"utf-8");
            br = new BufferedReader(ir);

            String line;
            int index = 0;
            int row = 0;
            while((line = br.readLine()) != null){
                if("".equals(line)){
                    index++;
                    row = 0;
                    continue;
                }
                String[] part = line.split("\\|");
                int len = part.length;
                for(int i=0;i<len;i++){
                    int v = Integer.parseInt(part[i]);
                    positionsDepths[index][row][i] = v;
                    if(i == 0) continue;
                    intervalDepths[index][row][i-1] = v - positionsDepths[index][row][i-1];
                }
                row++;
            }
        }finally {
            FileUtils.closeQuietly(br,ir,in);
        }
    }

    /**
     * 初始化位置和插值间隔数组
     */
    private void initArrays() {
        for(int i=0;i<positionsDepths.length;i++){
            positionsDepths[i] = new int[SECOND_SAMPLE_HEIGHT_DEPTHS[i]][];
            intervalDepths[i] = new int[SECOND_SAMPLE_HEIGHT_DEPTHS[i]][];
            for(int j=0;j<positionsDepths[i].length;j++){
                positionsDepths[i][j] = new int[SECOND_SAMPLE_WIDTH_BASE];
                intervalDepths[i][j] = new int[SECOND_SAMPLE_WIDTH_BASE];
            }
        }
    }

    /************************************Getters********************************/

    public int[][] getPositions(Depth depth){
        return positionsDepths[depth.getIndex()];
    }

    public int[][] getIntervals(Depth depth){
        return intervalDepths[depth.getIndex()];
    }

    public static byte[] getZeroInsertions(Depth depth){
        return ZERO_INSERTIONS_DEPTHS[depth.getIndex()];
    }

    public static int getSecondSampleWidth(Depth depth){
        return SECOND_SAMPLE_WIDTH_BASE;
    }

    public static int getSecondSampleHeight(Depth depth){
        return SECOND_SAMPLE_HEIGHT_DEPTHS[depth.getIndex()];
    }

    public static int getThirdSampleWidth(Depth depth){
        return THIRD_SAMPLE_WIDTH_DEPTHS[depth.getIndex()];
    }

    public static int getThirdSampleHeight(Depth depth){
        return THIRD_SAMPLE_HEIGHT_DEPTHS[depth.getIndex()];
    }

    public static int getDisplayWidth(Depth depth){
        return DISPLAY_WIDTH_DEPTHS[depth.getIndex()];
    }

    public static int getDisplayHeight(Depth depth){
        return DISPLAY_HEIGHT_DEPTHS[depth.getIndex()];
    }

    /**
     * 获取唯一实例
     * @param context
     * @return
     */
    public static Configuration getInstance(Context context) {
        return (conf == null) ? (conf=new Configuration(context)) : conf;
    }

    /*********************************深度30-220的插零信息*********************************/

    private static final byte[][] ZERO_INSERTIONS_DEPTHS = {
            {
                    0, 3, 7, 10, 13, 16, 20, 23, 26, 29, 32, 35, 38, 41, 43, 46, 49, 51, 54, 56,
                    59, 61, 64, 66, 68, 70, 73, 75, 77, 79, 81, 83, 84, 86, 88, 89, 91, 93, 94, 95,
                    97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 107, 108, 109, 109, 110, 110, 111, 111, 112, 112,
                    112, 112, 112, 112, 112, 112, 112, 112, 112, 111, 111, 110, 110, 109, 109, 108, 107, 107, 106, 105,
                    104, 103, 102, 101, 99, 98, 97, 95, 94, 93, 91, 89, 88, 86, 84, 83, 81, 79, 77, 75,
                    73, 70, 68, 66, 64, 61, 59, 56, 54, 51, 49, 46, 43, 41, 38, 35, 32, 29, 26, 23,
                    20, 16, 13, 10, 7, 3, 0,
            },
            {
                    0, 2, 5, 7, 10, 12, 14, 17, 19, 21, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42,
                    44, 46, 48, 49, 51, 53, 54, 56, 57, 59, 60, 62, 63, 64, 66, 67, 68, 69, 70, 71,
                    72, 73, 74, 75, 76, 77, 78, 78, 79, 80, 80, 81, 81, 82, 82, 83, 83, 83, 83, 84,
                    84, 84, 84, 84, 84, 84, 84, 84, 83, 83, 83, 83, 82, 82, 81, 81, 80, 80, 79, 78,
                    78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 64, 63, 62, 60, 59, 57, 56,
                    54, 53, 51, 49, 48, 46, 44, 42, 40, 38, 36, 34, 32, 30, 28, 26, 24, 21, 19, 17,
                    14, 12, 10, 7, 5, 2, 0,
            },
            {
                    0, 2, 4, 6, 8, 9, 11, 13, 15, 17, 19, 20, 22, 24, 26, 27, 29, 30, 32, 33,
                    35, 36, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
                    58, 59, 59, 60, 61, 61, 62, 62, 63, 64, 64, 64, 65, 65, 66, 66, 66, 66, 67, 67,
                    67, 67, 67, 67, 67, 67, 67, 67, 67, 66, 66, 66, 66, 65, 65, 64, 64, 64, 63, 62,
                    62, 61, 61, 60, 59, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 44,
                    43, 42, 41, 39, 38, 36, 35, 33, 32, 30, 29, 27, 26, 24, 22, 20, 19, 17, 15, 13,
                    11, 9, 8, 6, 4, 2, 0,
            },
            {
                    0, 2, 4, 5, 7, 9, 10, 12, 13, 15, 16, 18, 19, 21, 22, 24, 25, 26, 27, 29,
                    30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 44, 45, 46, 47, 48, 48,
                    49, 50, 50, 51, 51, 52, 52, 53, 53, 54, 54, 55, 55, 55, 55, 56, 56, 56, 56, 56,
                    57, 57, 57, 57, 57, 57, 57, 56, 56, 56, 56, 56, 55, 55, 55, 55, 54, 54, 53, 53,
                    52, 52, 51, 51, 50, 50, 49, 48, 48, 47, 46, 45, 44, 44, 43, 42, 41, 40, 39, 38,
                    37, 36, 35, 33, 32, 31, 30, 29, 27, 26, 25, 24, 22, 21, 19, 18, 16, 15, 13, 12,
                    10, 9, 7, 5, 4, 2, 0,
            },
            {
                    0, 2, 3, 5, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25,
                    26, 27, 28, 29, 30, 31, 32, 32, 33, 34, 35, 36, 37, 37, 38, 39, 39, 40, 41, 41,
                    42, 43, 43, 44, 44, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 48, 48, 48,
                    48, 49, 49, 49, 49, 49, 48, 48, 48, 48, 48, 48, 48, 47, 47, 47, 46, 46, 46, 45,
                    45, 45, 44, 44, 43, 43, 42, 41, 41, 40, 39, 39, 38, 37, 37, 36, 35, 34, 33, 32,
                    32, 31, 30, 29, 28, 27, 26, 25, 24, 22, 21, 20, 19, 18, 17, 15, 14, 13, 12, 10,
                    9, 7, 6, 5, 3, 2, 0,
            },
            {
                    0, 1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
                    22, 23, 24, 25, 25, 26, 27, 28, 29, 29, 30, 31, 31, 32, 33, 33, 34, 35, 35, 36,
                    36, 37, 37, 38, 38, 38, 39, 39, 40, 40, 40, 40, 41, 41, 41, 41, 41, 42, 42, 42,
                    42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 41, 41, 41, 41, 41, 40, 40, 40, 40, 39,
                    39, 38, 38, 38, 37, 37, 36, 36, 35, 35, 34, 33, 33, 32, 31, 31, 30, 29, 29, 28,
                    27, 26, 25, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 8,
                    7, 6, 5, 4, 2, 1, 0,
            },
            {
                    0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 18, 19,
                    20, 21, 22, 22, 23, 24, 25, 25, 26, 27, 27, 28, 28, 29, 30, 30, 31, 31, 32, 32,
                    33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38,
                    38, 38, 38, 38, 38, 38, 38, 38, 38, 37, 37, 37, 37, 37, 37, 36, 36, 36, 36, 35,
                    35, 35, 34, 34, 33, 33, 33, 32, 32, 31, 31, 30, 30, 29, 28, 28, 27, 27, 26, 25,
                    25, 24, 23, 22, 22, 21, 20, 19, 18, 17, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8,
                    7, 6, 5, 4, 3, 1, 0,
            },
            {
                    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 13, 14, 15, 16, 16, 17,
                    18, 19, 19, 20, 21, 21, 22, 23, 23, 24, 24, 25, 26, 26, 27, 27, 28, 28, 29, 29,
                    29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34,
                    34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 33, 33, 33, 33, 33, 33, 32, 32, 32,
                    31, 31, 31, 30, 30, 30, 29, 29, 29, 28, 28, 27, 27, 26, 26, 25, 24, 24, 23, 23,
                    22, 21, 21, 20, 19, 19, 18, 17, 16, 16, 15, 14, 13, 12, 12, 11, 10, 9, 8, 7,
                    6, 5, 4, 3, 2, 1, 0,
            },
            {
                    0, 1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 9, 10, 11, 12, 12, 13, 14, 15, 15,
                    16, 17, 17, 18, 18, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 25, 26,
                    26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30,
                    30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 29, 29, 29, 29, 29, 28,
                    28, 28, 28, 27, 27, 27, 26, 26, 25, 25, 25, 24, 24, 23, 23, 22, 22, 21, 21, 20,
                    20, 19, 18, 18, 17, 17, 16, 15, 15, 14, 13, 12, 12, 11, 10, 9, 9, 8, 7, 6,
                    5, 4, 3, 3, 2, 1, 0,
            },
            {
                    0, 1, 2, 3, 4, 4, 5, 6, 7, 7, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14,
                    15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 23, 24, 24,
                    24, 25, 25, 25, 26, 26, 26, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28,
                    28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 27, 27, 27, 27, 27, 26,
                    26, 26, 26, 25, 25, 25, 24, 24, 24, 23, 23, 23, 22, 22, 21, 21, 20, 20, 19, 19,
                    18, 18, 17, 17, 16, 16, 15, 14, 14, 13, 12, 12, 11, 10, 10, 9, 8, 7, 7, 6,
                    5, 4, 4, 3, 2, 1, 0,
            },
            {
                    0, 1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10, 10, 11, 11, 12, 13, 13,
                    14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 20, 21, 21, 22, 22, 22,
                    23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26,
                    26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 25, 25, 25, 25, 25, 25, 24,
                    24, 24, 24, 23, 23, 23, 23, 22, 22, 22, 21, 21, 20, 20, 20, 19, 19, 18, 18, 17,
                    17, 16, 16, 15, 15, 14, 14, 13, 13, 12, 11, 11, 10, 10, 9, 8, 8, 7, 6, 5,
                    5, 4, 3, 2, 2, 1, 0,
            },
            {
                    0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 9, 10, 11, 11, 12, 12,
                    13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 17, 18, 18, 19, 19, 19, 20, 20, 20, 21,
                    21, 21, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24,
                    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 23, 23, 23, 23, 23,
                    22, 22, 22, 22, 22, 21, 21, 21, 20, 20, 20, 19, 19, 19, 18, 18, 17, 17, 17, 16,
                    16, 15, 15, 14, 14, 13, 13, 12, 12, 11, 11, 10, 9, 9, 8, 8, 7, 6, 6, 5,
                    4, 4, 3, 2, 2, 1, 0,
            },
            {
                    0, 1, 2, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11,
                    12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19,
                    20, 20, 20, 20, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23,
                    23, 23, 23, 23, 23, 23, 23, 23, 23, 22, 22, 22, 22, 22, 22, 22, 22, 22, 21, 21,
                    21, 21, 21, 20, 20, 20, 20, 19, 19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 16, 15,
                    15, 14, 14, 13, 13, 12, 12, 11, 11, 10, 10, 9, 9, 8, 8, 7, 7, 6, 5, 5,
                    4, 3, 3, 2, 2, 1, 0,
            },
            {
                    0, 1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 8, 8, 9, 9, 10, 10, 11,
                    11, 11, 12, 12, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18,
                    18, 18, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21,
                    21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 20, 20, 20, 20, 20, 20, 20,
                    19, 19, 19, 19, 19, 18, 18, 18, 18, 17, 17, 17, 16, 16, 16, 15, 15, 15, 14, 14,
                    14, 13, 13, 12, 12, 11, 11, 11, 10, 10, 9, 9, 8, 8, 7, 6, 6, 5, 5, 4,
                    4, 3, 2, 2, 1, 1, 0,
            },
            {
                    0, 1, 1, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10,
                    11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 17, 17, 17,
                    17, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20,
                    20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19, 19, 19, 19, 19, 19,
                    19, 18, 18, 18, 18, 18, 17, 17, 17, 17, 16, 16, 16, 15, 15, 15, 15, 14, 14, 13,
                    13, 13, 12, 12, 12, 11, 11, 10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4,
                    4, 3, 3, 2, 1, 1, 0,
            },
            {
                    0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10,
                    10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16,
                    16, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19,
                    19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 18, 18, 18, 18, 18, 18, 18, 18,
                    17, 17, 17, 17, 17, 17, 16, 16, 16, 16, 15, 15, 15, 15, 14, 14, 14, 13, 13, 13,
                    12, 12, 12, 11, 11, 10, 10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4,
                    3, 3, 2, 2, 1, 1, 0,
            },
            {
                    0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9, 9, 9,
                    10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16,
                    16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18,
                    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17,
                    17, 17, 17, 16, 16, 16, 16, 16, 15, 15, 15, 15, 14, 14, 14, 14, 13, 13, 13, 12,
                    12, 12, 11, 11, 11, 10, 10, 9, 9, 9, 8, 8, 7, 7, 6, 6, 6, 5, 5, 4,
                    4, 3, 3, 2, 2, 1, 0,
            },
            {
                    0, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7, 7, 8, 8, 9,
                    9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 14,
                    15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17,
                    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 16, 16, 16, 16, 16, 16,
                    16, 16, 15, 15, 15, 15, 15, 14, 14, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 11,
                    11, 11, 10, 10, 10, 9, 9, 9, 8, 8, 7, 7, 7, 6, 6, 5, 5, 4, 4, 4,
                    3, 3, 2, 2, 1, 1, 0,
            },
            {
                    0, 1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8,
                    9, 9, 9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14,
                    14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16,
                    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 15, 15,
                    15, 15, 15, 15, 14, 14, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11,
                    11, 10, 10, 10, 9, 9, 9, 8, 8, 7, 7, 7, 6, 6, 6, 5, 5, 4, 4, 3,
                    3, 2, 2, 2, 1, 1, 0,
            },
            {
                    0, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8,
                    8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 13,
                    14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16,
                    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                    15, 14, 14, 14, 14, 14, 14, 13, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11,
                    10, 10, 10, 9, 9, 9, 8, 8, 8, 7, 7, 7, 6, 6, 6, 5, 5, 4, 4, 4,
                    3, 3, 2, 2, 1, 1, 0,
            },
    };

    /************************深度30-220mm对应的二次采样帧宽高****************************/

    public static final int SECOND_SAMPLE_WIDTH_BASE = 127;
    public static final int SECOND_SAMPLE_MAX_HEIGHT = 512;

    public static final int[] SECOND_SAMPLE_HEIGHT_DEPTHS = {
            512, 484, 467, 457, 449,
            442, 438, 434, 430, 428,
            426, 424, 423, 421, 420,
            419, 418, 417, 416, 416,
    };

    /*****************************深度30-220mm对应的三次采样帧宽高*************************/

    public static final int THIRD_SAMPLE_MAX_WIDTH = 1452;
    public static final int THIRD_SAMPLE_MAX_HEIGHT = 512;

    public static final int[] THIRD_SAMPLE_WIDTH_DEPTHS = {
            1452, 1244, 1120, 1036, 978,
            932, 898, 870, 848, 828,
            812, 798, 788, 776, 768,
            760, 752, 746, 740, 734,
    };

    public static final int[] THIRD_SAMPLE_HEIGHT_DEPTHS = {
            512, 484, 467, 457, 449,
            442, 438, 434, 430, 428,
            426, 424, 423, 421, 420,
            419, 418, 417, 416, 416,
    };

    /************************深度30-220mm对应的图像显示宽高***************************/

    public static final int[] DISPLAY_WIDTH_DEPTHS = {
            1299, 1113, 1002, 928, 875,
            835, 804, 779, 759, 742,
            727, 715, 705, 695, 688,
            680, 673, 668, 663, 657,
    };

    public static final int[] DISPLAY_HEIGHT_DEPTHS = THIRD_SAMPLE_HEIGHT_DEPTHS;

}
